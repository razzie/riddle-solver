#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Alloc
{
    uint offset;
};

struct AnnotatedRef
{
    uint offset;
};

struct AnnotatedTag
{
    uint tag;
    uint flags;
};

struct PathRef
{
    uint offset;
};

struct TileRef
{
    uint offset;
};

struct Path
{
    uvec4 bbox;
    TileRef tiles;
};

struct Config
{
    uint n_elements;
    uint n_pathseg;
    uint width_in_tiles;
    uint height_in_tiles;
    Alloc tile_alloc;
    Alloc bin_alloc;
    Alloc ptcl_alloc;
    Alloc pathseg_alloc;
    Alloc anno_alloc;
    Alloc trans_alloc;
};

layout(binding = 0, std430) buffer Memory
{
    uint mem_offset;
    uint mem_error;
    uint memory[];
} _79;

layout(binding = 1, std430) readonly buffer ConfigBuf
{
    Config conf;
} _187;

shared uint sh_row_width[128];
shared Alloc sh_row_alloc[128];
shared uint sh_row_count[128];

bool touch_mem(Alloc alloc, uint offset)
{
    return true;
}

uint read_mem(Alloc alloc, uint offset)
{
    Alloc param = alloc;
    uint param_1 = offset;
    if (!touch_mem(param, param_1))
    {
        return 0u;
    }
    uint v = _79.memory[offset];
    return v;
}

AnnotatedTag Annotated_tag(Alloc a, AnnotatedRef ref)
{
    Alloc param = a;
    uint param_1 = ref.offset >> uint(2);
    uint tag_and_flags = read_mem(param, param_1);
    return AnnotatedTag(tag_and_flags & 65535u, tag_and_flags >> uint(16));
}

uint fill_mode_from_flags(uint flags)
{
    return flags & 1u;
}

Path Path_read(Alloc a, PathRef ref)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint raw0 = read_mem(param, param_1);
    Alloc param_2 = a;
    uint param_3 = ix + 1u;
    uint raw1 = read_mem(param_2, param_3);
    Alloc param_4 = a;
    uint param_5 = ix + 2u;
    uint raw2 = read_mem(param_4, param_5);
    Path s;
    s.bbox = uvec4(raw0 & 65535u, raw0 >> uint(16), raw1 & 65535u, raw1 >> uint(16));
    s.tiles = TileRef(raw2);
    return s;
}

Alloc new_alloc(uint offset, uint size, bool mem_ok)
{
    Alloc a;
    a.offset = offset;
    return a;
}

void write_mem(Alloc alloc, uint offset, uint val)
{
    Alloc param = alloc;
    uint param_1 = offset;
    if (!touch_mem(param, param_1))
    {
        return;
    }
    _79.memory[offset] = val;
}

void main()
{
    uint th_ix = gl_LocalInvocationID.x;
    uint element_ix = gl_GlobalInvocationID.x;
    AnnotatedRef ref = AnnotatedRef(_187.conf.anno_alloc.offset + (element_ix * 32u));
    uint row_count = 0u;
    bool mem_ok = _79.mem_error == 0u;
    if (element_ix < _187.conf.n_elements)
    {
        Alloc param;
        param.offset = _187.conf.anno_alloc.offset;
        AnnotatedRef param_1 = ref;
        AnnotatedTag tag = Annotated_tag(param, param_1);
        switch (tag.tag)
        {
            case 2u:
            case 3u:
            case 1u:
            {
                uint param_2 = tag.flags;
                if (fill_mode_from_flags(param_2) != 0u)
                {
                    break;
                }
                PathRef path_ref = PathRef(_187.conf.tile_alloc.offset + (element_ix * 12u));
                Alloc param_3;
                param_3.offset = _187.conf.tile_alloc.offset;
                PathRef param_4 = path_ref;
                Path path = Path_read(param_3, param_4);
                sh_row_width[th_ix] = path.bbox.z - path.bbox.x;
                row_count = path.bbox.w - path.bbox.y;
                bool _267 = row_count == 1u;
                bool _273;
                if (_267)
                {
                    _273 = path.bbox.y > 0u;
                }
                else
                {
                    _273 = _267;
                }
                if (_273)
                {
                    row_count = 0u;
                }
                uint param_5 = path.tiles.offset;
                uint param_6 = ((path.bbox.z - path.bbox.x) * (path.bbox.w - path.bbox.y)) * 8u;
                bool param_7 = mem_ok;
                Alloc path_alloc = new_alloc(param_5, param_6, param_7);
                sh_row_alloc[th_ix] = path_alloc;
                break;
            }
        }
    }
    sh_row_count[th_ix] = row_count;
    for (uint i = 0u; i < 7u; i++)
    {
        barrier();
        if (th_ix >= uint(1 << int(i)))
        {
            row_count += sh_row_count[th_ix - uint(1 << int(i))];
        }
        barrier();
        sh_row_count[th_ix] = row_count;
    }
    barrier();
    uint total_rows = sh_row_count[127];
    uint _399;
    for (uint row = th_ix; row < total_rows; row += 128u)
    {
        uint el_ix = 0u;
        for (uint i_1 = 0u; i_1 < 7u; i_1++)
        {
            uint probe = el_ix + uint(64 >> int(i_1));
            if (row >= sh_row_count[probe - 1u])
            {
                el_ix = probe;
            }
        }
        uint width = sh_row_width[el_ix];
        if ((width > 0u) && mem_ok)
        {
            Alloc tiles_alloc = sh_row_alloc[el_ix];
            if (el_ix > 0u)
            {
                _399 = sh_row_count[el_ix - 1u];
            }
            else
            {
                _399 = 0u;
            }
            uint seq_ix = row - _399;
            uint tile_el_ix = ((tiles_alloc.offset >> uint(2)) + 1u) + ((seq_ix * 2u) * width);
            Alloc param_8 = tiles_alloc;
            uint param_9 = tile_el_ix;
            uint sum = read_mem(param_8, param_9);
            for (uint x = 1u; x < width; x++)
            {
                tile_el_ix += 2u;
                Alloc param_10 = tiles_alloc;
                uint param_11 = tile_el_ix;
                sum += read_mem(param_10, param_11);
                Alloc param_12 = tiles_alloc;
                uint param_13 = tile_el_ix;
                uint param_14 = sum;
                write_mem(param_12, param_13, param_14);
            }
        }
    }
}

