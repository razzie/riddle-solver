#version 310 es
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Alloc
{
    uint offset;
};

struct ElementRef
{
    uint offset;
};

struct LineSegRef
{
    uint offset;
};

struct LineSeg
{
    vec2 p0;
    vec2 p1;
};

struct QuadSegRef
{
    uint offset;
};

struct QuadSeg
{
    vec2 p0;
    vec2 p1;
    vec2 p2;
};

struct CubicSegRef
{
    uint offset;
};

struct CubicSeg
{
    vec2 p0;
    vec2 p1;
    vec2 p2;
    vec2 p3;
};

struct FillColorRef
{
    uint offset;
};

struct FillColor
{
    uint rgba_color;
};

struct FillImageRef
{
    uint offset;
};

struct FillImage
{
    uint index;
    ivec2 offset;
};

struct SetLineWidthRef
{
    uint offset;
};

struct SetLineWidth
{
    float width;
};

struct TransformRef
{
    uint offset;
};

struct Transform
{
    vec4 mat;
    vec2 translate;
};

struct ClipRef
{
    uint offset;
};

struct Clip
{
    vec4 bbox;
};

struct SetFillModeRef
{
    uint offset;
};

struct SetFillMode
{
    uint fill_mode;
};

struct ElementTag
{
    uint tag;
    uint flags;
};

struct StateRef
{
    uint offset;
};

struct State
{
    vec4 mat;
    vec2 translate;
    vec4 bbox;
    float linewidth;
    uint flags;
    uint path_count;
    uint pathseg_count;
    uint trans_count;
};

struct AnnoImageRef
{
    uint offset;
};

struct AnnoImage
{
    vec4 bbox;
    float linewidth;
    uint index;
    ivec2 offset;
};

struct AnnoColorRef
{
    uint offset;
};

struct AnnoColor
{
    vec4 bbox;
    float linewidth;
    uint rgba_color;
};

struct AnnoBeginClipRef
{
    uint offset;
};

struct AnnoBeginClip
{
    vec4 bbox;
    float linewidth;
};

struct AnnoEndClipRef
{
    uint offset;
};

struct AnnoEndClip
{
    vec4 bbox;
};

struct AnnotatedRef
{
    uint offset;
};

struct PathCubicRef
{
    uint offset;
};

struct PathCubic
{
    vec2 p0;
    vec2 p1;
    vec2 p2;
    vec2 p3;
    uint path_ix;
    uint trans_ix;
    vec2 stroke;
};

struct PathSegRef
{
    uint offset;
};

struct TransformSegRef
{
    uint offset;
};

struct TransformSeg
{
    vec4 mat;
    vec2 translate;
};

struct Config
{
    uint n_elements;
    uint n_pathseg;
    uint width_in_tiles;
    uint height_in_tiles;
    Alloc tile_alloc;
    Alloc bin_alloc;
    Alloc ptcl_alloc;
    Alloc pathseg_alloc;
    Alloc anno_alloc;
    Alloc trans_alloc;
};

layout(binding = 0, std430) buffer Memory
{
    uint mem_offset;
    uint mem_error;
    uint memory[];
} _294;

layout(binding = 2, std430) readonly buffer SceneBuf
{
    uint scene[];
} _323;

layout(binding = 3, std430) coherent buffer StateBuf
{
    uint part_counter;
    uint state[];
} _779;

layout(binding = 1, std430) readonly buffer ConfigBuf
{
    Config conf;
} _2429;

shared uint sh_part_ix;
shared State sh_state[32];
shared State sh_prefix;

ElementTag Element_tag(ElementRef ref)
{
    uint tag_and_flags = _323.scene[ref.offset >> uint(2)];
    return ElementTag(tag_and_flags & 65535u, tag_and_flags >> uint(16));
}

LineSeg LineSeg_read(LineSegRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    uint raw1 = _323.scene[ix + 1u];
    uint raw2 = _323.scene[ix + 2u];
    uint raw3 = _323.scene[ix + 3u];
    LineSeg s;
    s.p0 = vec2(uintBitsToFloat(raw0), uintBitsToFloat(raw1));
    s.p1 = vec2(uintBitsToFloat(raw2), uintBitsToFloat(raw3));
    return s;
}

LineSeg Element_Line_read(ElementRef ref)
{
    LineSegRef param = LineSegRef(ref.offset + 4u);
    return LineSeg_read(param);
}

QuadSeg QuadSeg_read(QuadSegRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    uint raw1 = _323.scene[ix + 1u];
    uint raw2 = _323.scene[ix + 2u];
    uint raw3 = _323.scene[ix + 3u];
    uint raw4 = _323.scene[ix + 4u];
    uint raw5 = _323.scene[ix + 5u];
    QuadSeg s;
    s.p0 = vec2(uintBitsToFloat(raw0), uintBitsToFloat(raw1));
    s.p1 = vec2(uintBitsToFloat(raw2), uintBitsToFloat(raw3));
    s.p2 = vec2(uintBitsToFloat(raw4), uintBitsToFloat(raw5));
    return s;
}

QuadSeg Element_Quad_read(ElementRef ref)
{
    QuadSegRef param = QuadSegRef(ref.offset + 4u);
    return QuadSeg_read(param);
}

CubicSeg CubicSeg_read(CubicSegRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    uint raw1 = _323.scene[ix + 1u];
    uint raw2 = _323.scene[ix + 2u];
    uint raw3 = _323.scene[ix + 3u];
    uint raw4 = _323.scene[ix + 4u];
    uint raw5 = _323.scene[ix + 5u];
    uint raw6 = _323.scene[ix + 6u];
    uint raw7 = _323.scene[ix + 7u];
    CubicSeg s;
    s.p0 = vec2(uintBitsToFloat(raw0), uintBitsToFloat(raw1));
    s.p1 = vec2(uintBitsToFloat(raw2), uintBitsToFloat(raw3));
    s.p2 = vec2(uintBitsToFloat(raw4), uintBitsToFloat(raw5));
    s.p3 = vec2(uintBitsToFloat(raw6), uintBitsToFloat(raw7));
    return s;
}

CubicSeg Element_Cubic_read(ElementRef ref)
{
    CubicSegRef param = CubicSegRef(ref.offset + 4u);
    return CubicSeg_read(param);
}

SetLineWidth SetLineWidth_read(SetLineWidthRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    SetLineWidth s;
    s.width = uintBitsToFloat(raw0);
    return s;
}

SetLineWidth Element_SetLineWidth_read(ElementRef ref)
{
    SetLineWidthRef param = SetLineWidthRef(ref.offset + 4u);
    return SetLineWidth_read(param);
}

Transform Transform_read(TransformRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    uint raw1 = _323.scene[ix + 1u];
    uint raw2 = _323.scene[ix + 2u];
    uint raw3 = _323.scene[ix + 3u];
    uint raw4 = _323.scene[ix + 4u];
    uint raw5 = _323.scene[ix + 5u];
    Transform s;
    s.mat = vec4(uintBitsToFloat(raw0), uintBitsToFloat(raw1), uintBitsToFloat(raw2), uintBitsToFloat(raw3));
    s.translate = vec2(uintBitsToFloat(raw4), uintBitsToFloat(raw5));
    return s;
}

Transform Element_Transform_read(ElementRef ref)
{
    TransformRef param = TransformRef(ref.offset + 4u);
    return Transform_read(param);
}

SetFillMode SetFillMode_read(SetFillModeRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    SetFillMode s;
    s.fill_mode = raw0;
    return s;
}

SetFillMode Element_SetFillMode_read(ElementRef ref)
{
    SetFillModeRef param = SetFillModeRef(ref.offset + 4u);
    return SetFillMode_read(param);
}

State map_element(ElementRef ref)
{
    ElementRef param = ref;
    uint tag = Element_tag(param).tag;
    State c;
    c.bbox = vec4(0.0);
    c.mat = vec4(1.0, 0.0, 0.0, 1.0);
    c.translate = vec2(0.0);
    c.linewidth = 1.0;
    c.flags = 0u;
    c.path_count = 0u;
    c.pathseg_count = 0u;
    c.trans_count = 0u;
    switch (tag)
    {
        case 1u:
        {
            ElementRef param_1 = ref;
            LineSeg line = Element_Line_read(param_1);
            vec2 _1919 = min(line.p0, line.p1);
            c.bbox = vec4(_1919.x, _1919.y, c.bbox.z, c.bbox.w);
            vec2 _1927 = max(line.p0, line.p1);
            c.bbox = vec4(c.bbox.x, c.bbox.y, _1927.x, _1927.y);
            c.pathseg_count = 1u;
            break;
        }
        case 2u:
        {
            ElementRef param_2 = ref;
            QuadSeg quad = Element_Quad_read(param_2);
            vec2 _1944 = min(min(quad.p0, quad.p1), quad.p2);
            c.bbox = vec4(_1944.x, _1944.y, c.bbox.z, c.bbox.w);
            vec2 _1955 = max(max(quad.p0, quad.p1), quad.p2);
            c.bbox = vec4(c.bbox.x, c.bbox.y, _1955.x, _1955.y);
            c.pathseg_count = 1u;
            break;
        }
        case 3u:
        {
            ElementRef param_3 = ref;
            CubicSeg cubic = Element_Cubic_read(param_3);
            vec2 _1975 = min(min(cubic.p0, cubic.p1), min(cubic.p2, cubic.p3));
            c.bbox = vec4(_1975.x, _1975.y, c.bbox.z, c.bbox.w);
            vec2 _1989 = max(max(cubic.p0, cubic.p1), max(cubic.p2, cubic.p3));
            c.bbox = vec4(c.bbox.x, c.bbox.y, _1989.x, _1989.y);
            c.pathseg_count = 1u;
            break;
        }
        case 4u:
        case 9u:
        case 7u:
        {
            c.flags = 4u;
            c.path_count = 1u;
            break;
        }
        case 8u:
        {
            c.path_count = 1u;
            break;
        }
        case 5u:
        {
            ElementRef param_4 = ref;
            SetLineWidth lw = Element_SetLineWidth_read(param_4);
            c.linewidth = lw.width;
            c.flags = 1u;
            break;
        }
        case 6u:
        {
            ElementRef param_5 = ref;
            Transform t = Element_Transform_read(param_5);
            c.mat = t.mat;
            c.translate = t.translate;
            c.trans_count = 1u;
            break;
        }
        case 10u:
        {
            ElementRef param_6 = ref;
            SetFillMode fm = Element_SetFillMode_read(param_6);
            c.flags = 8u | (fm.fill_mode << uint(4));
            break;
        }
    }
    return c;
}

ElementRef Element_index(ElementRef ref, uint index)
{
    return ElementRef(ref.offset + (index * 36u));
}

State combine_state(State a, State b)
{
    State c;
    c.bbox.x = (min(a.mat.x * b.bbox.x, a.mat.x * b.bbox.z) + min(a.mat.z * b.bbox.y, a.mat.z * b.bbox.w)) + a.translate.x;
    c.bbox.y = (min(a.mat.y * b.bbox.x, a.mat.y * b.bbox.z) + min(a.mat.w * b.bbox.y, a.mat.w * b.bbox.w)) + a.translate.y;
    c.bbox.z = (max(a.mat.x * b.bbox.x, a.mat.x * b.bbox.z) + max(a.mat.z * b.bbox.y, a.mat.z * b.bbox.w)) + a.translate.x;
    c.bbox.w = (max(a.mat.y * b.bbox.x, a.mat.y * b.bbox.z) + max(a.mat.w * b.bbox.y, a.mat.w * b.bbox.w)) + a.translate.y;
    bool _1657 = (a.flags & 4u) == 0u;
    bool _1665;
    if (_1657)
    {
        _1665 = b.bbox.z <= b.bbox.x;
    }
    else
    {
        _1665 = _1657;
    }
    bool _1673;
    if (_1665)
    {
        _1673 = b.bbox.w <= b.bbox.y;
    }
    else
    {
        _1673 = _1665;
    }
    if (_1673)
    {
        c.bbox = a.bbox;
    }
    else
    {
        bool _1683 = (a.flags & 4u) == 0u;
        bool _1690;
        if (_1683)
        {
            _1690 = (b.flags & 2u) == 0u;
        }
        else
        {
            _1690 = _1683;
        }
        bool _1707;
        if (_1690)
        {
            bool _1697 = a.bbox.z > a.bbox.x;
            bool _1706;
            if (!_1697)
            {
                _1706 = a.bbox.w > a.bbox.y;
            }
            else
            {
                _1706 = _1697;
            }
            _1707 = _1706;
        }
        else
        {
            _1707 = _1690;
        }
        if (_1707)
        {
            vec2 _1716 = min(a.bbox.xy, c.bbox.xy);
            c.bbox = vec4(_1716.x, _1716.y, c.bbox.z, c.bbox.w);
            vec2 _1726 = max(a.bbox.zw, c.bbox.zw);
            c.bbox = vec4(c.bbox.x, c.bbox.y, _1726.x, _1726.y);
        }
    }
    c.mat.x = (a.mat.x * b.mat.x) + (a.mat.z * b.mat.y);
    c.mat.y = (a.mat.y * b.mat.x) + (a.mat.w * b.mat.y);
    c.mat.z = (a.mat.x * b.mat.z) + (a.mat.z * b.mat.w);
    c.mat.w = (a.mat.y * b.mat.z) + (a.mat.w * b.mat.w);
    c.translate.x = ((a.mat.x * b.translate.x) + (a.mat.z * b.translate.y)) + a.translate.x;
    c.translate.y = ((a.mat.y * b.translate.x) + (a.mat.w * b.translate.y)) + a.translate.y;
    float _1812;
    if ((b.flags & 1u) == 0u)
    {
        _1812 = a.linewidth;
    }
    else
    {
        _1812 = b.linewidth;
    }
    c.linewidth = _1812;
    c.flags = (a.flags & 11u) | b.flags;
    c.flags |= ((a.flags & 4u) >> uint(1));
    uint _1842;
    if ((b.flags & 8u) == 0u)
    {
        _1842 = a.flags;
    }
    else
    {
        _1842 = b.flags;
    }
    uint fill_mode = _1842;
    fill_mode &= 16u;
    c.flags = (c.flags & 4294967279u) | fill_mode;
    c.path_count = a.path_count + b.path_count;
    c.pathseg_count = a.pathseg_count + b.pathseg_count;
    c.trans_count = a.trans_count + b.trans_count;
    return c;
}

StateRef state_aggregate_ref(uint partition_ix)
{
    return StateRef(4u + (partition_ix * 124u));
}

void State_write(StateRef ref, State s)
{
    uint ix = ref.offset >> uint(2);
    _779.state[ix + 0u] = floatBitsToUint(s.mat.x);
    _779.state[ix + 1u] = floatBitsToUint(s.mat.y);
    _779.state[ix + 2u] = floatBitsToUint(s.mat.z);
    _779.state[ix + 3u] = floatBitsToUint(s.mat.w);
    _779.state[ix + 4u] = floatBitsToUint(s.translate.x);
    _779.state[ix + 5u] = floatBitsToUint(s.translate.y);
    _779.state[ix + 6u] = floatBitsToUint(s.bbox.x);
    _779.state[ix + 7u] = floatBitsToUint(s.bbox.y);
    _779.state[ix + 8u] = floatBitsToUint(s.bbox.z);
    _779.state[ix + 9u] = floatBitsToUint(s.bbox.w);
    _779.state[ix + 10u] = floatBitsToUint(s.linewidth);
    _779.state[ix + 11u] = s.flags;
    _779.state[ix + 12u] = s.path_count;
    _779.state[ix + 13u] = s.pathseg_count;
    _779.state[ix + 14u] = s.trans_count;
}

StateRef state_prefix_ref(uint partition_ix)
{
    return StateRef((4u + (partition_ix * 124u)) + 60u);
}

uint state_flag_index(uint partition_ix)
{
    return partition_ix * 31u;
}

State State_read(StateRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _779.state[ix + 0u];
    uint raw1 = _779.state[ix + 1u];
    uint raw2 = _779.state[ix + 2u];
    uint raw3 = _779.state[ix + 3u];
    uint raw4 = _779.state[ix + 4u];
    uint raw5 = _779.state[ix + 5u];
    uint raw6 = _779.state[ix + 6u];
    uint raw7 = _779.state[ix + 7u];
    uint raw8 = _779.state[ix + 8u];
    uint raw9 = _779.state[ix + 9u];
    uint raw10 = _779.state[ix + 10u];
    uint raw11 = _779.state[ix + 11u];
    uint raw12 = _779.state[ix + 12u];
    uint raw13 = _779.state[ix + 13u];
    uint raw14 = _779.state[ix + 14u];
    State s;
    s.mat = vec4(uintBitsToFloat(raw0), uintBitsToFloat(raw1), uintBitsToFloat(raw2), uintBitsToFloat(raw3));
    s.translate = vec2(uintBitsToFloat(raw4), uintBitsToFloat(raw5));
    s.bbox = vec4(uintBitsToFloat(raw6), uintBitsToFloat(raw7), uintBitsToFloat(raw8), uintBitsToFloat(raw9));
    s.linewidth = uintBitsToFloat(raw10);
    s.flags = raw11;
    s.path_count = raw12;
    s.pathseg_count = raw13;
    s.trans_count = raw14;
    return s;
}

uint fill_mode_from_flags(uint flags)
{
    return flags & 1u;
}

vec2 get_linewidth(State st)
{
    return vec2(length(st.mat.xz), length(st.mat.yw)) * (0.5 * st.linewidth);
}

bool touch_mem(Alloc alloc, uint offset)
{
    return true;
}

void write_mem(Alloc alloc, uint offset, uint val)
{
    Alloc param = alloc;
    uint param_1 = offset;
    if (!touch_mem(param, param_1))
    {
        return;
    }
    _294.memory[offset] = val;
}

void PathCubic_write(Alloc a, PathCubicRef ref, PathCubic s)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint param_2 = floatBitsToUint(s.p0.x);
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    uint param_4 = ix + 1u;
    uint param_5 = floatBitsToUint(s.p0.y);
    write_mem(param_3, param_4, param_5);
    Alloc param_6 = a;
    uint param_7 = ix + 2u;
    uint param_8 = floatBitsToUint(s.p1.x);
    write_mem(param_6, param_7, param_8);
    Alloc param_9 = a;
    uint param_10 = ix + 3u;
    uint param_11 = floatBitsToUint(s.p1.y);
    write_mem(param_9, param_10, param_11);
    Alloc param_12 = a;
    uint param_13 = ix + 4u;
    uint param_14 = floatBitsToUint(s.p2.x);
    write_mem(param_12, param_13, param_14);
    Alloc param_15 = a;
    uint param_16 = ix + 5u;
    uint param_17 = floatBitsToUint(s.p2.y);
    write_mem(param_15, param_16, param_17);
    Alloc param_18 = a;
    uint param_19 = ix + 6u;
    uint param_20 = floatBitsToUint(s.p3.x);
    write_mem(param_18, param_19, param_20);
    Alloc param_21 = a;
    uint param_22 = ix + 7u;
    uint param_23 = floatBitsToUint(s.p3.y);
    write_mem(param_21, param_22, param_23);
    Alloc param_24 = a;
    uint param_25 = ix + 8u;
    uint param_26 = s.path_ix;
    write_mem(param_24, param_25, param_26);
    Alloc param_27 = a;
    uint param_28 = ix + 9u;
    uint param_29 = s.trans_ix;
    write_mem(param_27, param_28, param_29);
    Alloc param_30 = a;
    uint param_31 = ix + 10u;
    uint param_32 = floatBitsToUint(s.stroke.x);
    write_mem(param_30, param_31, param_32);
    Alloc param_33 = a;
    uint param_34 = ix + 11u;
    uint param_35 = floatBitsToUint(s.stroke.y);
    write_mem(param_33, param_34, param_35);
}

void PathSeg_Cubic_write(Alloc a, PathSegRef ref, uint flags, PathCubic s)
{
    Alloc param = a;
    uint param_1 = ref.offset >> uint(2);
    uint param_2 = (flags << uint(16)) | 1u;
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    PathCubicRef param_4 = PathCubicRef(ref.offset + 4u);
    PathCubic param_5 = s;
    PathCubic_write(param_3, param_4, param_5);
}

FillColor FillColor_read(FillColorRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    FillColor s;
    s.rgba_color = raw0;
    return s;
}

FillColor Element_FillColor_read(ElementRef ref)
{
    FillColorRef param = FillColorRef(ref.offset + 4u);
    return FillColor_read(param);
}

void AnnoColor_write(Alloc a, AnnoColorRef ref, AnnoColor s)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint param_2 = floatBitsToUint(s.bbox.x);
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    uint param_4 = ix + 1u;
    uint param_5 = floatBitsToUint(s.bbox.y);
    write_mem(param_3, param_4, param_5);
    Alloc param_6 = a;
    uint param_7 = ix + 2u;
    uint param_8 = floatBitsToUint(s.bbox.z);
    write_mem(param_6, param_7, param_8);
    Alloc param_9 = a;
    uint param_10 = ix + 3u;
    uint param_11 = floatBitsToUint(s.bbox.w);
    write_mem(param_9, param_10, param_11);
    Alloc param_12 = a;
    uint param_13 = ix + 4u;
    uint param_14 = floatBitsToUint(s.linewidth);
    write_mem(param_12, param_13, param_14);
    Alloc param_15 = a;
    uint param_16 = ix + 5u;
    uint param_17 = s.rgba_color;
    write_mem(param_15, param_16, param_17);
}

void Annotated_Color_write(Alloc a, AnnotatedRef ref, uint flags, AnnoColor s)
{
    Alloc param = a;
    uint param_1 = ref.offset >> uint(2);
    uint param_2 = (flags << uint(16)) | 1u;
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    AnnoColorRef param_4 = AnnoColorRef(ref.offset + 4u);
    AnnoColor param_5 = s;
    AnnoColor_write(param_3, param_4, param_5);
}

FillImage FillImage_read(FillImageRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    uint raw1 = _323.scene[ix + 1u];
    FillImage s;
    s.index = raw0;
    s.offset = ivec2(int(raw1 << uint(16)) >> 16, int(raw1) >> 16);
    return s;
}

FillImage Element_FillImage_read(ElementRef ref)
{
    FillImageRef param = FillImageRef(ref.offset + 4u);
    return FillImage_read(param);
}

void AnnoImage_write(Alloc a, AnnoImageRef ref, AnnoImage s)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint param_2 = floatBitsToUint(s.bbox.x);
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    uint param_4 = ix + 1u;
    uint param_5 = floatBitsToUint(s.bbox.y);
    write_mem(param_3, param_4, param_5);
    Alloc param_6 = a;
    uint param_7 = ix + 2u;
    uint param_8 = floatBitsToUint(s.bbox.z);
    write_mem(param_6, param_7, param_8);
    Alloc param_9 = a;
    uint param_10 = ix + 3u;
    uint param_11 = floatBitsToUint(s.bbox.w);
    write_mem(param_9, param_10, param_11);
    Alloc param_12 = a;
    uint param_13 = ix + 4u;
    uint param_14 = floatBitsToUint(s.linewidth);
    write_mem(param_12, param_13, param_14);
    Alloc param_15 = a;
    uint param_16 = ix + 5u;
    uint param_17 = s.index;
    write_mem(param_15, param_16, param_17);
    Alloc param_18 = a;
    uint param_19 = ix + 6u;
    uint param_20 = (uint(s.offset.x) & 65535u) | (uint(s.offset.y) << uint(16));
    write_mem(param_18, param_19, param_20);
}

void Annotated_Image_write(Alloc a, AnnotatedRef ref, uint flags, AnnoImage s)
{
    Alloc param = a;
    uint param_1 = ref.offset >> uint(2);
    uint param_2 = (flags << uint(16)) | 2u;
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    AnnoImageRef param_4 = AnnoImageRef(ref.offset + 4u);
    AnnoImage param_5 = s;
    AnnoImage_write(param_3, param_4, param_5);
}

Clip Clip_read(ClipRef ref)
{
    uint ix = ref.offset >> uint(2);
    uint raw0 = _323.scene[ix + 0u];
    uint raw1 = _323.scene[ix + 1u];
    uint raw2 = _323.scene[ix + 2u];
    uint raw3 = _323.scene[ix + 3u];
    Clip s;
    s.bbox = vec4(uintBitsToFloat(raw0), uintBitsToFloat(raw1), uintBitsToFloat(raw2), uintBitsToFloat(raw3));
    return s;
}

Clip Element_BeginClip_read(ElementRef ref)
{
    ClipRef param = ClipRef(ref.offset + 4u);
    return Clip_read(param);
}

void AnnoBeginClip_write(Alloc a, AnnoBeginClipRef ref, AnnoBeginClip s)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint param_2 = floatBitsToUint(s.bbox.x);
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    uint param_4 = ix + 1u;
    uint param_5 = floatBitsToUint(s.bbox.y);
    write_mem(param_3, param_4, param_5);
    Alloc param_6 = a;
    uint param_7 = ix + 2u;
    uint param_8 = floatBitsToUint(s.bbox.z);
    write_mem(param_6, param_7, param_8);
    Alloc param_9 = a;
    uint param_10 = ix + 3u;
    uint param_11 = floatBitsToUint(s.bbox.w);
    write_mem(param_9, param_10, param_11);
    Alloc param_12 = a;
    uint param_13 = ix + 4u;
    uint param_14 = floatBitsToUint(s.linewidth);
    write_mem(param_12, param_13, param_14);
}

void Annotated_BeginClip_write(Alloc a, AnnotatedRef ref, uint flags, AnnoBeginClip s)
{
    Alloc param = a;
    uint param_1 = ref.offset >> uint(2);
    uint param_2 = (flags << uint(16)) | 3u;
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    AnnoBeginClipRef param_4 = AnnoBeginClipRef(ref.offset + 4u);
    AnnoBeginClip param_5 = s;
    AnnoBeginClip_write(param_3, param_4, param_5);
}

Clip Element_EndClip_read(ElementRef ref)
{
    ClipRef param = ClipRef(ref.offset + 4u);
    return Clip_read(param);
}

void AnnoEndClip_write(Alloc a, AnnoEndClipRef ref, AnnoEndClip s)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint param_2 = floatBitsToUint(s.bbox.x);
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    uint param_4 = ix + 1u;
    uint param_5 = floatBitsToUint(s.bbox.y);
    write_mem(param_3, param_4, param_5);
    Alloc param_6 = a;
    uint param_7 = ix + 2u;
    uint param_8 = floatBitsToUint(s.bbox.z);
    write_mem(param_6, param_7, param_8);
    Alloc param_9 = a;
    uint param_10 = ix + 3u;
    uint param_11 = floatBitsToUint(s.bbox.w);
    write_mem(param_9, param_10, param_11);
}

void Annotated_EndClip_write(Alloc a, AnnotatedRef ref, AnnoEndClip s)
{
    Alloc param = a;
    uint param_1 = ref.offset >> uint(2);
    uint param_2 = 4u;
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    AnnoEndClipRef param_4 = AnnoEndClipRef(ref.offset + 4u);
    AnnoEndClip param_5 = s;
    AnnoEndClip_write(param_3, param_4, param_5);
}

void TransformSeg_write(Alloc a, TransformSegRef ref, TransformSeg s)
{
    uint ix = ref.offset >> uint(2);
    Alloc param = a;
    uint param_1 = ix + 0u;
    uint param_2 = floatBitsToUint(s.mat.x);
    write_mem(param, param_1, param_2);
    Alloc param_3 = a;
    uint param_4 = ix + 1u;
    uint param_5 = floatBitsToUint(s.mat.y);
    write_mem(param_3, param_4, param_5);
    Alloc param_6 = a;
    uint param_7 = ix + 2u;
    uint param_8 = floatBitsToUint(s.mat.z);
    write_mem(param_6, param_7, param_8);
    Alloc param_9 = a;
    uint param_10 = ix + 3u;
    uint param_11 = floatBitsToUint(s.mat.w);
    write_mem(param_9, param_10, param_11);
    Alloc param_12 = a;
    uint param_13 = ix + 4u;
    uint param_14 = floatBitsToUint(s.translate.x);
    write_mem(param_12, param_13, param_14);
    Alloc param_15 = a;
    uint param_16 = ix + 5u;
    uint param_17 = floatBitsToUint(s.translate.y);
    write_mem(param_15, param_16, param_17);
}

void main()
{
    if (gl_LocalInvocationID.x == 0u)
    {
        uint _2063 = atomicAdd(_779.part_counter, 1u);
        sh_part_ix = _2063;
    }
    barrier();
    uint part_ix = sh_part_ix;
    uint ix = (part_ix * 128u) + (gl_LocalInvocationID.x * 4u);
    ElementRef ref = ElementRef(ix * 36u);
    ElementRef param = ref;
    State th_state[4];
    th_state[0] = map_element(param);
    for (uint i = 1u; i < 4u; i++)
    {
        ElementRef param_1 = ref;
        uint param_2 = i;
        ElementRef param_3 = Element_index(param_1, param_2);
        State param_4 = th_state[i - 1u];
        State param_5 = map_element(param_3);
        th_state[i] = combine_state(param_4, param_5);
    }
    State agg = th_state[3];
    sh_state[gl_LocalInvocationID.x] = agg;
    for (uint i_1 = 0u; i_1 < 5u; i_1++)
    {
        barrier();
        if (gl_LocalInvocationID.x >= uint(1 << int(i_1)))
        {
            State other = sh_state[gl_LocalInvocationID.x - uint(1 << int(i_1))];
            State param_6 = other;
            State param_7 = agg;
            agg = combine_state(param_6, param_7);
        }
        barrier();
        sh_state[gl_LocalInvocationID.x] = agg;
    }
    State exclusive;
    exclusive.bbox = vec4(0.0);
    exclusive.mat = vec4(1.0, 0.0, 0.0, 1.0);
    exclusive.translate = vec2(0.0);
    exclusive.linewidth = 1.0;
    exclusive.flags = 0u;
    exclusive.path_count = 0u;
    exclusive.pathseg_count = 0u;
    exclusive.trans_count = 0u;
    if (gl_LocalInvocationID.x == 31u)
    {
        uint param_8 = part_ix;
        StateRef param_9 = state_aggregate_ref(param_8);
        State param_10 = agg;
        State_write(param_9, param_10);
        uint flag = 1u;
        memoryBarrierBuffer();
        if (part_ix == 0u)
        {
            uint param_11 = part_ix;
            StateRef param_12 = state_prefix_ref(param_11);
            State param_13 = agg;
            State_write(param_12, param_13);
            flag = 2u;
        }
        uint param_14 = part_ix;
        _779.state[state_flag_index(param_14)] = flag;
        if (part_ix != 0u)
        {
            uint look_back_ix = part_ix - 1u;
            uint their_ix = 0u;
            State their_agg;
            while (true)
            {
                uint param_15 = look_back_ix;
                flag = _779.state[state_flag_index(param_15)];
                if (flag == 2u)
                {
                    uint param_16 = look_back_ix;
                    StateRef param_17 = state_prefix_ref(param_16);
                    State their_prefix = State_read(param_17);
                    State param_18 = their_prefix;
                    State param_19 = exclusive;
                    exclusive = combine_state(param_18, param_19);
                    break;
                }
                else
                {
                    if (flag == 1u)
                    {
                        uint param_20 = look_back_ix;
                        StateRef param_21 = state_aggregate_ref(param_20);
                        their_agg = State_read(param_21);
                        State param_22 = their_agg;
                        State param_23 = exclusive;
                        exclusive = combine_state(param_22, param_23);
                        look_back_ix--;
                        their_ix = 0u;
                        continue;
                    }
                }
                ElementRef ref_1 = ElementRef(((look_back_ix * 128u) + their_ix) * 36u);
                ElementRef param_24 = ref_1;
                State s = map_element(param_24);
                if (their_ix == 0u)
                {
                    their_agg = s;
                }
                else
                {
                    State param_25 = their_agg;
                    State param_26 = s;
                    their_agg = combine_state(param_25, param_26);
                }
                their_ix++;
                if (their_ix == 128u)
                {
                    State param_27 = their_agg;
                    State param_28 = exclusive;
                    exclusive = combine_state(param_27, param_28);
                    if (look_back_ix == 0u)
                    {
                        break;
                    }
                    look_back_ix--;
                    their_ix = 0u;
                }
            }
            State param_29 = exclusive;
            State param_30 = agg;
            State inclusive_prefix = combine_state(param_29, param_30);
            sh_prefix = exclusive;
            uint param_31 = part_ix;
            StateRef param_32 = state_prefix_ref(param_31);
            State param_33 = inclusive_prefix;
            State_write(param_32, param_33);
            memoryBarrierBuffer();
            flag = 2u;
            uint param_34 = part_ix;
            _779.state[state_flag_index(param_34)] = flag;
        }
    }
    barrier();
    if (part_ix != 0u)
    {
        exclusive = sh_prefix;
    }
    State row = exclusive;
    if (gl_LocalInvocationID.x > 0u)
    {
        State other_1 = sh_state[gl_LocalInvocationID.x - 1u];
        State param_35 = row;
        State param_36 = other_1;
        row = combine_state(param_35, param_36);
    }
    PathCubic path_cubic;
    PathSegRef path_out_ref;
    Alloc param_45;
    Alloc param_51;
    Alloc param_57;
    AnnoColor anno_fill;
    AnnotatedRef out_ref;
    Alloc param_63;
    AnnoImage anno_img;
    Alloc param_69;
    AnnoBeginClip anno_begin_clip;
    Alloc param_75;
    Alloc param_80;
    Alloc param_83;
    for (uint i_2 = 0u; i_2 < 4u; i_2++)
    {
        State param_37 = row;
        State param_38 = th_state[i_2];
        State st = combine_state(param_37, param_38);
        ElementRef param_39 = ref;
        uint param_40 = i_2;
        ElementRef this_ref = Element_index(param_39, param_40);
        ElementRef param_41 = this_ref;
        ElementTag tag = Element_tag(param_41);
        uint param_42 = st.flags >> uint(4);
        uint fill_mode = fill_mode_from_flags(param_42);
        bool is_stroke = fill_mode == 1u;
        switch (tag.tag)
        {
            case 1u:
            {
                ElementRef param_43 = this_ref;
                LineSeg line = Element_Line_read(param_43);
                path_cubic.p0 = line.p0;
                path_cubic.p1 = mix(line.p0, line.p1, vec2(0.3333333432674407958984375));
                path_cubic.p2 = mix(line.p1, line.p0, vec2(0.3333333432674407958984375));
                path_cubic.p3 = line.p1;
                path_cubic.path_ix = st.path_count;
                path_cubic.trans_ix = st.trans_count;
                if (is_stroke)
                {
                    State param_44 = st;
                    path_cubic.stroke = get_linewidth(param_44);
                }
                else
                {
                    path_cubic.stroke = vec2(0.0);
                }
                path_out_ref = PathSegRef(_2429.conf.pathseg_alloc.offset + ((st.pathseg_count - 1u) * 52u));
                param_45.offset = _2429.conf.pathseg_alloc.offset;
                PathSegRef param_46 = path_out_ref;
                uint param_47 = fill_mode;
                PathCubic param_48 = path_cubic;
                PathSeg_Cubic_write(param_45, param_46, param_47, param_48);
                break;
            }
            case 2u:
            {
                ElementRef param_49 = this_ref;
                QuadSeg quad = Element_Quad_read(param_49);
                path_cubic.p0 = quad.p0;
                path_cubic.p1 = mix(quad.p1, quad.p0, vec2(0.3333333432674407958984375));
                path_cubic.p2 = mix(quad.p1, quad.p2, vec2(0.3333333432674407958984375));
                path_cubic.p3 = quad.p2;
                path_cubic.path_ix = st.path_count;
                path_cubic.trans_ix = st.trans_count;
                if (is_stroke)
                {
                    State param_50 = st;
                    path_cubic.stroke = get_linewidth(param_50);
                }
                else
                {
                    path_cubic.stroke = vec2(0.0);
                }
                path_out_ref = PathSegRef(_2429.conf.pathseg_alloc.offset + ((st.pathseg_count - 1u) * 52u));
                param_51.offset = _2429.conf.pathseg_alloc.offset;
                PathSegRef param_52 = path_out_ref;
                uint param_53 = fill_mode;
                PathCubic param_54 = path_cubic;
                PathSeg_Cubic_write(param_51, param_52, param_53, param_54);
                break;
            }
            case 3u:
            {
                ElementRef param_55 = this_ref;
                CubicSeg cubic = Element_Cubic_read(param_55);
                path_cubic.p0 = cubic.p0;
                path_cubic.p1 = cubic.p1;
                path_cubic.p2 = cubic.p2;
                path_cubic.p3 = cubic.p3;
                path_cubic.path_ix = st.path_count;
                path_cubic.trans_ix = st.trans_count;
                if (is_stroke)
                {
                    State param_56 = st;
                    path_cubic.stroke = get_linewidth(param_56);
                }
                else
                {
                    path_cubic.stroke = vec2(0.0);
                }
                path_out_ref = PathSegRef(_2429.conf.pathseg_alloc.offset + ((st.pathseg_count - 1u) * 52u));
                param_57.offset = _2429.conf.pathseg_alloc.offset;
                PathSegRef param_58 = path_out_ref;
                uint param_59 = fill_mode;
                PathCubic param_60 = path_cubic;
                PathSeg_Cubic_write(param_57, param_58, param_59, param_60);
                break;
            }
            case 4u:
            {
                ElementRef param_61 = this_ref;
                FillColor fill = Element_FillColor_read(param_61);
                anno_fill.rgba_color = fill.rgba_color;
                if (is_stroke)
                {
                    State param_62 = st;
                    vec2 lw = get_linewidth(param_62);
                    anno_fill.bbox = st.bbox + vec4(-lw, lw);
                    anno_fill.linewidth = st.linewidth * sqrt(abs((st.mat.x * st.mat.w) - (st.mat.y * st.mat.z)));
                }
                else
                {
                    anno_fill.bbox = st.bbox;
                    anno_fill.linewidth = 0.0;
                }
                out_ref = AnnotatedRef(_2429.conf.anno_alloc.offset + ((st.path_count - 1u) * 32u));
                param_63.offset = _2429.conf.anno_alloc.offset;
                AnnotatedRef param_64 = out_ref;
                uint param_65 = fill_mode;
                AnnoColor param_66 = anno_fill;
                Annotated_Color_write(param_63, param_64, param_65, param_66);
                break;
            }
            case 9u:
            {
                ElementRef param_67 = this_ref;
                FillImage fill_img = Element_FillImage_read(param_67);
                anno_img.index = fill_img.index;
                anno_img.offset = fill_img.offset;
                if (is_stroke)
                {
                    State param_68 = st;
                    vec2 lw_1 = get_linewidth(param_68);
                    anno_img.bbox = st.bbox + vec4(-lw_1, lw_1);
                    anno_img.linewidth = st.linewidth * sqrt(abs((st.mat.x * st.mat.w) - (st.mat.y * st.mat.z)));
                }
                else
                {
                    anno_img.bbox = st.bbox;
                    anno_img.linewidth = 0.0;
                }
                out_ref = AnnotatedRef(_2429.conf.anno_alloc.offset + ((st.path_count - 1u) * 32u));
                param_69.offset = _2429.conf.anno_alloc.offset;
                AnnotatedRef param_70 = out_ref;
                uint param_71 = fill_mode;
                AnnoImage param_72 = anno_img;
                Annotated_Image_write(param_69, param_70, param_71, param_72);
                break;
            }
            case 7u:
            {
                ElementRef param_73 = this_ref;
                Clip begin_clip = Element_BeginClip_read(param_73);
                anno_begin_clip.bbox = begin_clip.bbox;
                if (is_stroke)
                {
                    State param_74 = st;
                    vec2 lw_2 = get_linewidth(param_74);
                    anno_begin_clip.linewidth = st.linewidth * sqrt(abs((st.mat.x * st.mat.w) - (st.mat.y * st.mat.z)));
                }
                else
                {
                    anno_fill.linewidth = 0.0;
                }
                out_ref = AnnotatedRef(_2429.conf.anno_alloc.offset + ((st.path_count - 1u) * 32u));
                param_75.offset = _2429.conf.anno_alloc.offset;
                AnnotatedRef param_76 = out_ref;
                uint param_77 = fill_mode;
                AnnoBeginClip param_78 = anno_begin_clip;
                Annotated_BeginClip_write(param_75, param_76, param_77, param_78);
                break;
            }
            case 8u:
            {
                ElementRef param_79 = this_ref;
                Clip end_clip = Element_EndClip_read(param_79);
                AnnoEndClip anno_end_clip = AnnoEndClip(end_clip.bbox);
                out_ref = AnnotatedRef(_2429.conf.anno_alloc.offset + ((st.path_count - 1u) * 32u));
                param_80.offset = _2429.conf.anno_alloc.offset;
                AnnotatedRef param_81 = out_ref;
                AnnoEndClip param_82 = anno_end_clip;
                Annotated_EndClip_write(param_80, param_81, param_82);
                break;
            }
            case 6u:
            {
                TransformSeg transform = TransformSeg(st.mat, st.translate);
                TransformSegRef trans_ref = TransformSegRef(_2429.conf.trans_alloc.offset + ((st.trans_count - 1u) * 24u));
                param_83.offset = _2429.conf.trans_alloc.offset;
                TransformSegRef param_84 = trans_ref;
                TransformSeg param_85 = transform;
                TransformSeg_write(param_83, param_84, param_85);
                break;
            }
        }
    }
}

